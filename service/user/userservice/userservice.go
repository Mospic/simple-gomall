// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userservice

import (
	"context"

	"mall/service/user/proto/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReq      = user.DeleteReq
	DeleteResp     = user.DeleteResp
	GetMessageReq  = user.GetMessageReq
	GetMessageResp = user.GetMessageResp
	InfoReq        = user.InfoReq
	InfoResp       = user.InfoResp
	LoginReq       = user.LoginReq
	LoginResp      = user.LoginResp
	RegisterReq    = user.RegisterReq
	RegisterResp   = user.RegisterResp
	UpdateReq      = user.UpdateReq
	UpdateResp     = user.UpdateResp

	UserService interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
		Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
		GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (*GetMessageResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultUserService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultUserService) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}

func (m *defaultUserService) GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (*GetMessageResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}
