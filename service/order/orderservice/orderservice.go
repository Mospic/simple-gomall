// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: order.proto

package orderservice

import (
	"context"

	"mall/service/order/proto/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address             = order.Address
	ListOrderReq        = order.ListOrderReq
	ListOrderResp       = order.ListOrderResp
	MarkOrderPaidReq    = order.MarkOrderPaidReq
	MarkOrderPaidResp   = order.MarkOrderPaidResp
	MarkOrderUnPaidReq  = order.MarkOrderUnPaidReq
	MarkOrderUnPaidResp = order.MarkOrderUnPaidResp
	Order               = order.Order
	OrderItem           = order.OrderItem
	PlaceOrderReq       = order.PlaceOrderReq
	PlaceOrderResp      = order.PlaceOrderResp
	ProcessOrderReq     = order.ProcessOrderReq
	ProcessOrderResp    = order.ProcessOrderResp

	OrderService interface {
		PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error)
		ProcessOrder(ctx context.Context, in *ProcessOrderReq, opts ...grpc.CallOption) (*ProcessOrderResp, error)
		ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderResp, error)
		MarkOrderPaid(ctx context.Context, in *MarkOrderPaidReq, opts ...grpc.CallOption) (*MarkOrderPaidResp, error)
		MarkOrderUnPaid(ctx context.Context, in *MarkOrderUnPaidReq, opts ...grpc.CallOption) (*MarkOrderUnPaidResp, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

func (m *defaultOrderService) PlaceOrder(ctx context.Context, in *PlaceOrderReq, opts ...grpc.CallOption) (*PlaceOrderResp, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.PlaceOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ProcessOrder(ctx context.Context, in *ProcessOrderReq, opts ...grpc.CallOption) (*ProcessOrderResp, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ProcessOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderResp, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ListOrder(ctx, in, opts...)
}

func (m *defaultOrderService) MarkOrderPaid(ctx context.Context, in *MarkOrderPaidReq, opts ...grpc.CallOption) (*MarkOrderPaidResp, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.MarkOrderPaid(ctx, in, opts...)
}

func (m *defaultOrderService) MarkOrderUnPaid(ctx context.Context, in *MarkOrderUnPaidReq, opts ...grpc.CallOption) (*MarkOrderUnPaidResp, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.MarkOrderUnPaid(ctx, in, opts...)
}
