// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: product.proto

package productcatalogservice

import (
	"context"

	"mall/service/product/proto/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductsReq  = product.CreateProductsReq
	CreateProductsResp = product.CreateProductsResp
	DeleteProductsReq  = product.DeleteProductsReq
	DeleteProductsResp = product.DeleteProductsResp
	GetProductReq      = product.GetProductReq
	GetProductResp     = product.GetProductResp
	ListProductsReq    = product.ListProductsReq
	ListProductsResp   = product.ListProductsResp
	Product            = product.Product
	SearchProductsReq  = product.SearchProductsReq
	SearchProductsResp = product.SearchProductsResp
	UpdateProductsReq  = product.UpdateProductsReq
	UpdateProductsResp = product.UpdateProductsResp

	ProductCatalogService interface {
		ListProducts(ctx context.Context, in *ListProductsReq, opts ...grpc.CallOption) (*ListProductsResp, error)
		GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error)
		SearchProducts(ctx context.Context, in *SearchProductsReq, opts ...grpc.CallOption) (*SearchProductsResp, error)
		CreateProducts(ctx context.Context, in *CreateProductsReq, opts ...grpc.CallOption) (*CreateProductsResp, error)
		UpdateProducts(ctx context.Context, in *UpdateProductsReq, opts ...grpc.CallOption) (*UpdateProductsResp, error)
		DeleteProducts(ctx context.Context, in *DeleteProductsReq, opts ...grpc.CallOption) (*DeleteProductsResp, error)
	}

	defaultProductCatalogService struct {
		cli zrpc.Client
	}
)

func NewProductCatalogService(cli zrpc.Client) ProductCatalogService {
	return &defaultProductCatalogService{
		cli: cli,
	}
}

func (m *defaultProductCatalogService) ListProducts(ctx context.Context, in *ListProductsReq, opts ...grpc.CallOption) (*ListProductsResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.ListProducts(ctx, in, opts...)
}

func (m *defaultProductCatalogService) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

func (m *defaultProductCatalogService) SearchProducts(ctx context.Context, in *SearchProductsReq, opts ...grpc.CallOption) (*SearchProductsResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.SearchProducts(ctx, in, opts...)
}

func (m *defaultProductCatalogService) CreateProducts(ctx context.Context, in *CreateProductsReq, opts ...grpc.CallOption) (*CreateProductsResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.CreateProducts(ctx, in, opts...)
}

func (m *defaultProductCatalogService) UpdateProducts(ctx context.Context, in *UpdateProductsReq, opts ...grpc.CallOption) (*UpdateProductsResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.UpdateProducts(ctx, in, opts...)
}

func (m *defaultProductCatalogService) DeleteProducts(ctx context.Context, in *DeleteProductsReq, opts ...grpc.CallOption) (*DeleteProductsResp, error) {
	client := product.NewProductCatalogServiceClient(m.cli.Conn())
	return client.DeleteProducts(ctx, in, opts...)
}
