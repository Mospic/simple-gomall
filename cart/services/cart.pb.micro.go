// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cart.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	AddItem(ctx context.Context, in *AddItemReq, opts ...client.CallOption) (*AddItemResp, error)
	RemoveItem(ctx context.Context, in *RemoveItemReq, opts ...client.CallOption) (*RemoveItemResp, error)
	GetCart(ctx context.Context, in *GetCartReq, opts ...client.CallOption) (*GetCartResp, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) AddItem(ctx context.Context, in *AddItemReq, opts ...client.CallOption) (*AddItemResp, error) {
	req := c.c.NewRequest(c.name, "CartService.AddItem", in)
	out := new(AddItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) RemoveItem(ctx context.Context, in *RemoveItemReq, opts ...client.CallOption) (*RemoveItemResp, error) {
	req := c.c.NewRequest(c.name, "CartService.RemoveItem", in)
	out := new(RemoveItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetCart(ctx context.Context, in *GetCartReq, opts ...client.CallOption) (*GetCartResp, error) {
	req := c.c.NewRequest(c.name, "CartService.GetCart", in)
	out := new(GetCartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	AddItem(context.Context, *AddItemReq, *AddItemResp) error
	RemoveItem(context.Context, *RemoveItemReq, *RemoveItemResp) error
	GetCart(context.Context, *GetCartReq, *GetCartResp) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		AddItem(ctx context.Context, in *AddItemReq, out *AddItemResp) error
		RemoveItem(ctx context.Context, in *RemoveItemReq, out *RemoveItemResp) error
		GetCart(ctx context.Context, in *GetCartReq, out *GetCartResp) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) AddItem(ctx context.Context, in *AddItemReq, out *AddItemResp) error {
	return h.CartServiceHandler.AddItem(ctx, in, out)
}

func (h *cartServiceHandler) RemoveItem(ctx context.Context, in *RemoveItemReq, out *RemoveItemResp) error {
	return h.CartServiceHandler.RemoveItem(ctx, in, out)
}

func (h *cartServiceHandler) GetCart(ctx context.Context, in *GetCartReq, out *GetCartResp) error {
	return h.CartServiceHandler.GetCart(ctx, in, out)
}
